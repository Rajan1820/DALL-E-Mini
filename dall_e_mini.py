# -*- coding: utf-8 -*-
"""DALL-E Mini

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hWPPI-2DqUMm7XuJpRxL02gBB4W7Hgd2
"""

!pip install -q dalle-mini
!pip install -q git+https://github.com/patil-suraj/vqgan-jax.git

"""We load required models:
* DALL¬∑E mini for text to encoded images
* VQGAN for decoding images
* CLIP for scoring predictions
"""

# Model references

# dalle-mega

DALLE_MODEL = "dalle-mini/dalle-mini/mini-1:v0"
DALLE_COMMIT_ID = None

# VQGAN model
VQGAN_REPO = "dalle-mini/vqgan_imagenet_f16_16384"
VQGAN_COMMIT_ID = "e93a26e7707683d349bf5d5c41c5b0ef69b677a9"

import jax
import jax.numpy as jnp
jax.local_device_count()

from dalle_mini import DalleBart, DalleBartProcessor
from vqgan_jax.modeling_flax_vqgan import VQModel
from transformers import CLIPProcessor, FlaxCLIPModel
model, params = DalleBart.from_pretrained(
    DALLE_MODEL, revision=DALLE_COMMIT_ID, dtype=jnp.float16, _do_init=False
)
vqgan, vqgan_params = VQModel.from_pretrained(
    VQGAN_REPO, revision=VQGAN_COMMIT_ID, _do_init=False
)

"""Model parameters are replicated on each device for faster inference."""

from flax.jax_utils import replicate

params = replicate(params)
vqgan_params = replicate(vqgan_params)

"""Model functions are compiled and parallelized to take advantage of multiple devices."""

from functools import partial
@partial(jax.pmap, axis_name="batch", static_broadcasted_argnums=(3, 4, 5, 6))
def p_generate(
    tokenized_prompt, key, params, top_k, top_p, temperature, condition_scale
):
    return model.generate(
        **tokenized_prompt,
        prng_key=key,
        params=params,
        top_k=top_k,
        top_p=top_p,
        temperature=temperature,
        condition_scale=condition_scale,
    )
@partial(jax.pmap, axis_name="batch")
def p_decode(indices, params):
    return vqgan.decode_code(indices, params=params)

"""Keys are passed to the model on each device to generate unique inference per device."""

import random
seed = random.randint(0, 2**32 - 1)
key = jax.random.PRNGKey(seed)

"""## üñç Text Prompt

Our model requires processing prompts.
"""

from dalle_mini import DalleBartProcessor
processor = DalleBartProcessor.from_pretrained(DALLE_MODEL, revision=DALLE_COMMIT_ID)

"""Let's define some text prompts."""

prompts = [
    "sunset in winter in france"
]

tokenized_prompts = processor(prompts)
tokenized_prompt = replicate(tokenized_prompts)

"""## üé® Generate images

We generate images using dalle-mini model and decode them with the VQGAN.
"""

n_predictions = 6
gen_top_k = None
gen_top_p = None
temperature = None
cond_scale = 10.0

from flax.training.common_utils import shard_prng_key
import numpy as np
from PIL import Image
from tqdm.notebook import trange

print(f"Prompts: {prompts}\n")
# generate images
images = []
for i in trange(max(n_predictions // jax.device_count(), 1)):
    # get a new key
    key, subkey = jax.random.split(key)
    # generate images
    encoded_images = p_generate(
        tokenized_prompt,
        shard_prng_key(subkey),
        params,
        gen_top_k,
        gen_top_p,
        temperature,
        cond_scale,
    )
    # remove BOS
    encoded_images = encoded_images.sequences[..., 1:]
    # decode images
    decoded_images = p_decode(encoded_images, vqgan_params)
    decoded_images = decoded_images.clip(0.0, 1.0).reshape((-1, 256, 256, 3))
    for decoded_img in decoded_images:
        img = Image.fromarray(np.asarray(decoded_img * 255, dtype=np.uint8))
        images.append(img)
        display(img)
        print()